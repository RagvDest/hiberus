openapi: 3.0.3
info:
  title: Employees Management API
  description: API for managing departments and employees
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
    description: Local Development Server

tags:
  - name: Department
    description: Department operations
  - name: Employee
    description: Employee operations

paths:
  /department/create:
    post:
      tags:
        - Department
      summary: Create a new department
      operationId: createDepartment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentCreateRequest'
      responses:
        '201':
          description: Department created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /department/delete/{departmentId}:
    post:
      tags:
        - Department
      summary: Delete a department (logical delete)
      operationId: deleteDepartment
      parameters:
        - name: departmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Department deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Department not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /employee/create/{departmentId}:
    post:
      tags:
        - Employee
      summary: Create a new employee for a department
      operationId: createEmployee
      parameters:
        - name: departmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeCreateRequest'
      responses:
        '201':
          description: Employee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Department not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /employee/delete/{employeeId}:
    post:
      tags:
        - Employee
      summary: Delete an employee (logical delete)
      operationId: deleteEmployee
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Employee deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /employee/highestSalary:
    get:
      tags:
        - Employee
      summary: Get the employee with the highest salary
      operationId: getHighestSalaryEmployee
      responses:
        '200':
          description: Employee with highest salary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HighestSalaryResponse'
        '404':
          description: No employees found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /employee/lowerAge:
    get:
      tags:
        - Employee
      summary: Get the youngest employee
      operationId: getYoungestEmployee
      responses:
        '200':
          description: Youngest employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YoungestEmployeeResponse'
        '404':
          description: No employees found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /employee/countLastMonth:
    get:
      tags:
        - Employee
      summary: Count employees hired in the last month
      operationId: countEmployeesHiredLastMonth
      responses:
        '200':
          description: Count of employees hired in the last month
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeCountResponse'

components:
  schemas:
    Department:
      type: object
      required:
        - id
        - name
        - status
      properties:
        id:
          type: integer
          format: int64
          description: Department ID
        name:
          type: string
          description: Department name
          minLength: 1
          maxLength: 100
        status:
          type: string
          description: Department status (active or inactive)

    DepartmentCreateRequest:
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
          description: Department name
          minLength: 1
          maxLength: 100
        status:
          type: string
          description: Department status (active or inactive)

    DepartmentResponse:
      type: object
      required:
        - id
        - name
        - status
      properties:
        id:
          type: integer
          format: int64
          description: Department ID
        name:
          type: string
          description: Department name
        status:
          type: string
          description: Department status (active or inactive)

    Employee:
      type: object
      required:
        - id
        - firstName
        - lastName
        - age
        - role
        - hireDate
        - status
        - departmentId
      properties:
        id:
          type: integer
          format: int64
          description: Employee ID
        firstName:
          type: string
          description: Employee first name
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          description: Employee last name
          minLength: 1
          maxLength: 50
        age:
          type: integer
          format: int32
          description: Employee age
          minimum: 18
          maximum: 100
        role:
          type: string
          description: Employee role/position
          minLength: 1
          maxLength: 100
        salary:
          type: number
          format: decimal
          description: Employee salary
          minimum: 0
        hireDate:
          type: string
          format: date
          description: Employee hire date
        terminationDate:
          type: string
          format: date
          description: Employee termination date
          nullable: true
        status:
          type: string
          description: Employee status (active or inactive)
        departmentId:
          type: integer
          format: int64
          description: Department ID that the employee belongs to

    EmployeeCreateRequest:
      type: object
      required:
        - firstName
        - lastName
        - age
        - role
        - status
      properties:
        firstName:
          type: string
          description: Employee first name
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          description: Employee last name
          minLength: 1
          maxLength: 50
        age:
          type: integer
          format: int32
          description: Employee age
          minimum: 18
          maximum: 100
        role:
          type: string
          description: Employee role/position
          minLength: 1
          maxLength: 100
        salary:
          type: number
          format: decimal
          description: Employee salary
          minimum: 0
        hireDate:
          type: string
          format: date
          description: Employee hire date
        terminationDate:
          type: string
          format: date
          description: Employee termination date
          nullable: true
        status:
          type: string
          description: Employee status (active or inactive)

    EmployeeResponse:
      type: object
      required:
        - id
        - firstName
        - lastName
        - age
        - role
        - hireDate
        - status
        - department
      properties:
        id:
          type: integer
          format: int64
          description: Employee ID
        firstName:
          type: string
          description: Employee first name
        lastName:
          type: string
          description: Employee last name
        age:
          type: integer
          format: int32
          description: Employee age
        role:
          type: string
          description: Employee role/position
        salary:
          type: number
          format: decimal
          description: Employee salary
        hireDate:
          type: string
          format: date
          description: Employee hire date
        terminationDate:
          type: string
          format: date
          description: Employee termination date
          nullable: true
        status:
          type: string
          description: Employee status (active or inactive)
        department:
          $ref: '#/components/schemas/DepartmentResponse'

    HighestSalaryResponse:
      type: object
      required:
        - employeeName
        - salary
      properties:
        employeeName:
          type: string
          description: Full name of the employee with highest salary
        salary:
          type: number
          format: decimal
          description: Highest salary value

    YoungestEmployeeResponse:
      type: object
      required:
        - employeeName
        - age
      properties:
        employeeName:
          type: string
          description: Full name of the youngest employee
        age:
          type: integer
          format: int32
          description: Age of the youngest employee

    EmployeeCountResponse:
      type: object
      required:
        - count
      properties:
        count:
          type: integer
          format: int32
          description: Count of employees hired in the last month

    SuccessResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Indicates if the operation was successful
        message:
          type: string
          description: Success message

    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          description: Always false for error responses
        error:
          type: string
          description: Error message